mongod

mongo

// ----- Creating documents ----- //
//Inserting a common document
db.moviesScratch.insertOne({ "title": "Rocky", "year": "1976", "imdb": "tt0075148"});
db.moviesScratch.find().pretty();

//Inserting a common document with a _id that I want
db.moviesScratch.insertOne({ "title": "Rocky", "year": "1976", "_id": "tt0075148"});

//Inserting many documents
db.moviesScratch.insertMany(
    [
        {
	    "imdb" : "tt0084726",
	    "title" : "Star Trek II: The Wrath of Khan",
	    "year" : 1982,
	    "type" : "movie"
        },
        {
	    "imdb" : "tt0796366",
	    "title" : "Star Trek",
	    "year" : 2009,
	    "type" : "movie"
        },
        {
	    "imdb" : "tt1408101",
	    "title" : "Star Trek Into Darkness",
	    "year" : 2013,
	    "type" : "movie"
        },
        {
	    "imdb" : "tt0117731",
	    "title" : "Star Trek: First Contact",
	    "year" : 1996,
	    "type" : "movie"
        }
    ]
);


//Droping the collection
db.moviesScratch.drop();

//Inserting many documents with _id's that I want, but with repeated _id's. It stops on the first error and only inserts 2 documents
db.moviesScratch.insertMany(
    [
        {
	    "_id" : "tt0084726",
	    "title" : "Star Trek II: The Wrath of Khan",
	    "year" : 1982,
	    "type" : "movie"
        },
        {
	    "_id" : "tt0796366",
	    "title" : "Star Trek",
	    "year" : 2009,
	    "type" : "movie"
        },
        {
	    "_id" : "tt0084726",
	    "title" : "Star Trek II: The Wrath of Khan",
	    "year" : 1982,
	    "type" : "movie"
        },
        {
	    "_id" : "tt1408101",
	    "title" : "Star Trek Into Darkness",
	    "year" : 2013,
	    "type" : "movie"
        },
        {
	    "_id" : "tt0117731",
	    "title" : "Star Trek: First Contact",
	    "year" : 1996,
	    "type" : "movie"
        }
    ]
);

db.moviesScratch.find().pretty();

//Inserting many documents with repeated _id's. It inserts the documents that are not with error and is able to insert all the correct documents
db.moviesScratch.insertMany(
    [
        {
	    "_id" : "tt0084726",
	    "title" : "Star Trek II: The Wrath of Khan",
	    "year" : 1982,
	    "type" : "movie"
        },
        {
	    "_id" : "tt0796366",
	    "title" : "Star Trek",
	    "year" : 2009,
	    "type" : "movie"
        },
        {
	    "_id" : "tt0084726",
	    "title" : "Star Trek II: The Wrath of Khan",
	    "year" : 1982,
	    "type" : "movie"
        },
        {
	    "_id" : "tt1408101",
	    "title" : "Star Trek Into Darkness",
	    "year" : 2013,
	    "type" : "movie"
        },
        {
	    "_id" : "tt0117731",
	    "title" : "Star Trek: First Contact",
	    "year" : 1996,
	    "type" : "movie"
        }
    ],
    {
        "ordered": false
    }
);
// ----- Creating documents ----- //



// ----- Reading documents ----- //
//Restore the dump of the week 2
mongorestore dump;

show dbs;
use video;

//Querying only documents matching the rated = PG-13
db.movieDetails.find({ rated: "PG-13" } ).pretty();

//Counting the query
db.movieDetails.find({ rated: "PG-13" } ).count();

//Matching 2 values and counting
db.movieDetails.find({ rated: "PG-13", year: 2009 } ).count();

//Matching an object value (repair that now, I have to use the double quotes to get into the nested object value)
db.movieDetails.find( { "tomato.meter": 100 } ).count()

//Find the writers array that matches exactly with the array that I've sent to the query
db.movieDetails.find({ "writers": ["Ethan Coen", "Joel Coen"] }).count();
db.movieDetails.find({ "writers": ["Ethan Coen", "Joel Coen"] }).pretty();

//Inverting the order of the writers on the above query (find 0)
db.movieDetails.find({ "writers": ["Joel Coen", "Ethan Coen"] }).count();

//Finding one writer that matches inside the array of writers (in any order inside the array)
db.movieDetails.find({ "actors": "Jeff Bridges" }).pretty();

//Finding the first writer that matches on the list of writers
db.movieDetails.find({ "actors.0": "Jeff Bridges" }).pretty();

//Cursor interation
var c = db.movieDetails.find();
var doc = function() { return c.hasNext() ? c.next() : null; }
c.objsLeftInBatch();
doc();
c.objsLeftInBatch();

//Projections
//Only brings in the cursor the title field and the _id field (the _id is by default brought in the result)
db.movieDetails.find({ rated: "PG" }, { title: 1 }).pretty();

//Now, just brings on the cursor the title field
db.movieDetails.find({ rated: "PG" }, { title: 1, _id: 0 }).pretty();

//Excludes the fields writers and actors on the cursor result
db.movieDetails.find({ rated: "PG" }, { writers: 0, actors: 0, _id: 0 }).pretty();
// ----- Reading documents ----- //


// ----- Comparison Operators (Query Selectors) ----- //
//Find movies with runtime greater than 90 minutes
db.movieDetails.find({ runtime: { $gt: 90 } }).pretty();

db.movieDetails.find({ runtime: { $gt: 90 } }, { _id: 0, title: 1, runtime: 1 }).pretty();

//Find movies with runtime greater than 90 minutes and less than 120 minutes
db.movieDetails.find({ runtime: { $gt: 90, $lt: 120 } }).pretty();

db.movieDetails.find({ runtime: { $gt: 90, $lt: 120 } }, { _id: 0, title: 1, runtime: 1 }).pretty();

//Find movies with runtime greater equals than 90 minutes and less equals than 120 minutes
db.movieDetails.find({ runtime: { $gte: 90, $lte: 120 } }, { _id: 0, title: 1, runtime: 1 }).pretty();

//Find movies with tomato.meter greater equals than 95 of note and runtime greater than 180 minutes
db.movieDetails.find({ "tomato.meter" : { $gte: 95}, runtime: { $gt: 180 } }).pretty();

db.movieDetails.find({ "tomato.meter" : { $gte: 95}, runtime: { $gt: 180 } }, { _id: 0, title: 1, runtime: 1 }).pretty();

//Find all the movies that has a rated field and has a value not equals to UNRATED
db.movieDetails.find({ rated: { $ne: "UNRATED" } }, { _id: 0, title: 1, rated: 1 }).pretty();
//The opposite of the above query
db.movieDetails.find({ rated: "UNRATED" }, { _id: 0, title: 1, rated: 1 }).pretty();

//Find rated movies where the values are "G" or "PG"
db.movieDetails.find({ rated: { $in: ["G", "PG"] } }, { _id: 0, title: 1, rated: 1 }).pretty();

//Find rated movies where the values are not "G" or "PG"
db.movieDetails.find({ rated: { $in: ["G", "PG"] } }, { _id: 0, title: 1, rated: 1 }).pretty();

// ----- Comparison Operators (Query Selectors) ----- //



// ----- Element Operators ----- //
//Find the movies that has a tomato meter
db.movieDetails.find({ "tomato.meter": { $exists: true } }).pretty();

//Find the movies that has not a tomato meter
db.movieDetails.find({ "tomato.meter": { $exists: false } }).pretty();

//Find the movies scratch where the id value is of the type string, not object
db.moviesScratch.find({ "_id": { $type: "string" } }).pretty();
// ----- Element Operators ----- //



// ----- Logical Operators ----- //
//Find the movies where the tomato.meter is greater than 95 or the metacritic is greater than 88. Only showing the title, tomato.meter and metacritic fields
db.movieDetails.find({ $or : [ { "tomato.meter": { $gt: 95 } }, { "metacritic": {$gt: 88 } } ] }, { "_id": 0, "title": 1, "metacritic": 1, "tomato.meter": 1 }).pretty();

//Find the movies where the tomato.meter is greater than 95 and the metacritic is greater than 88.
db.movieDetails.find({ $and : [ { "tomato.meter": { $gt: 95 } }, { "metacritic": {$gt: 88 } } ] }).count();
//but this query without the $and operator, brings the same result
db.movieDetails.find({ "tomato.meter": { $gt: 95 },  "metacritic": {$gt: 88 } }).count();
//The $and operator is necessary when I want to specify multiple criteria on the SAME field.
db.movieDetails.find({ $and : [ { "metacritic": { $ne: null } }, { "metacritic": { $exists: true } } ] }, { "metacritic": 1 }).pretty();
//I did not check the difference on the result, but the course says that it is different .-.
db.movieDetails.find({ "metacritic": { $ne: null }, "metacritic": { $exists: true } }, { "metacritic": 1 })

// ----- Logical Operators ----- //


// ----- Regex Operators ----- //
//Find the movies where the awards.text matches the regex that says that it has to begin with the "Won " sentence
db.movieDetails.find({ "awards.text": { $regex: /^Won\s.*/ } }).pretty();
db.movieDetails.find({ "awards.text": { $regex: /^Won\s.*/ } }, { title: 1, awards: 1, _id: 0 }).pretty();
// ----- Regex Operators ----- //



// ----- Updating Documents ----- //
//Updates the movie The Martian setting a poster value
db.movieDetails.updateOne({title: "The Martian"},
                          { $set: {poster: "http://ia.media-imdb.com/images/M/MV5BMTc2MTQ3MDA1Nl5BMl5BanBnXkFtZTgwODA3OTI4NjE@._V1_SX300.jpg"} })

//Updates the movie The Martian setting an award object value
db.movieDetails.updateOne({title: "The Martian"},
                          { $set: { "awards" : {"wins" : 8,
		                              "nominations" : 14,
		                                "text" : "Nominated for 3 Golden Globes. Another 8 wins & 14 nominations." } } });


//Updates the The Martian movie increasing the tomato.reviews by 3 and the tomato.userReviews by 25
db.movieDetails.updateOne({title: "The Martian"},
                          { $inc: { "tomato.reviews": 3, "tomato.userReviews": 25 } });

//Updates the The Martian movie, creating a new field reviews that is an array of reviews object
db.movieDetails.updateOne({title: "The Martian"},
                          {$push: { reviews: { rating: 4.5,
                                               date: ISODate("2016-01-12T09:00:00Z"),
                                               reviewer: "Spencer H.",
                                               text: "The Martian could have been a sad drama film, instead it was a hilarious film with a little bit of drama added to it. The Martian is what everybody wants from a space adventure. Ridley Scott can still make great movies and this is one of his best."} } })



//Updates the The Martian movie, inserting 3 reviews on the reviews array. Observe the $each operator, it's necessary to insert one object by one on the array.
db.movieDetails.updateOne({title: "The Martian"},
                          {$push: { reviews:
                                    { $each: [
                                        { rating: 0.5,
                                          date: ISODate("2016-01-12T07:00:00Z"),
                                          reviewer: "Yabo A.",
                                          text: "i believe its ranked high due to its slogan 'Bring him Home' there is nothing in the movie, nothing at all ! Story telling for fiction story !"},
                                        { rating: 5,
                                          date: ISODate("2016-01-12T09:00:00Z"),
                                          reviewer: "Kristina Z.",
                                          text: "This is a masterpiece. The ending is quite different from the book - the movie provides a resolution whilst a book doesn't."},
                                        { rating: 2.5,
                                          date: ISODate("2015-10-26T04:00:00Z"),
                                          reviewer: "Matthew Samuel",
                                          text: "There have been better movies made about space, and there are elements of the film that are borderline amateur, such as weak dialogue, an uneven tone, and film cliches."},
                                        { rating: 4.5,
                                          date: ISODate("2015-12-13T03:00:00Z"),
                                          reviewer: "Eugene B",
                                          text: "This novel-adaptation is humorous, intelligent and captivating in all its visual-grandeur. The Martian highlights an impeccable Matt Damon, power-stacked ensemble and Ridley Scott's masterful direction, which is back in full form."},
                                        { rating: 4.5,
                                          date: ISODate("2015-10-22T00:00:00Z"),
                                          reviewer: "Jens S",
                                          text: "A declaration of love for the potato, science and the indestructible will to survive. While it clearly is the Matt Damon show (and he is excellent), the supporting cast may be among the strongest seen on film in the last 10 years. An engaging, exciting, funny and beautifully filmed adventure thriller no one should miss."},
                                        { rating: 4.5,
                                          date: ISODate("2016-01-12T09:00:00Z"),
                                          reviewer: "Spencer H.",
                                          text: "The Martian could have been a sad drama film, instead it was a hilarious film with a little bit of drama added to it. The Martian is what everybody wants from a space adventure. Ridley Scott can still make great movies and this is one of his best."} ] } } } )


//If I try to do this, without the $each operator, it will insert an array inside my array
db.movieDetails.updateOne({title: "The Martian"},
                          {$push: { reviews: [
                                        { rating: 4.5,
                                          date: ISODate("2015-10-22T00:00:00Z"),
                                          reviewer: "Jens S",
                                          text: "A declaration of love for the potato, science and the indestructible will to survive. While it clearly is the Matt Damon show (and he is excellent), the supporting cast may be among the strongest seen on film in the last 10 years. An engaging, exciting, funny and beautifully filmed adventure thriller no one should miss."},
                                        { rating: 4.5,
                                          date: ISODate("2016-01-12T09:00:00Z"),
                                          reviewer: "Spencer H.",
                                          text: "The Martian could have been a sad drama film, instead it was a hilarious film with a little bit of drama added to it. The Martian is what everybody wants from a space adventure. Ridley Scott can still make great movies and this is one of his best."}
] } } );


//Removes all the reviews (all the array of reviews)
db.movieDetails.updateOne({ title: "The Martian" }, { $unset: { reviews: "" } });


//Suppose I want to keep the maximum of 5 reviews on my movie, and I want to keep all the last movies by the review date
//This query pushes an object inside the array on the first position, limiting the size of the array by 5, excluding the last ones
db.movieDetails.updateOne({ title: "The Martian" },
                          {$push: { reviews:
                                    { $each: [
                                        { rating: 0.5,
                                          date: ISODate("2016-01-13T07:00:00Z"),
                                          reviewer: "Shannon B.",
                                          text: "Enjoyed watching with my kids!" } ],
                                      $position: 0,
                                      $slice: 5 } } } )


//Updating the movies removing the field rated from the movies that has the rated: null
db.movieDetails.updateMany( { rated: null },
                            { $unset: { rated: "" } } )

//This query brings all movies that has a rated: null or the ones that has not the field rated
db.movieDetails.find( { rated: null } ).count()



//Creating a var that receives a document
var detail = {
    "title" : "The Martian",
    "year" : 2015,
    "rated" : "PG-13",
    "released" : ISODate("2015-10-02T04:00:00Z"),
    "runtime" : 144,
    "countries" : [
	"USA",
	"UK"
    ],
    "genres" : [
	"Adventure",
	"Drama",
	"Sci-Fi"
    ],
    "director" : "Ridley Scott",
    "writers" : [
	"Drew Goddard",
	"Andy Weir"
    ],
    "actors" : [
	"Matt Damon",
	"Jessica Chastain",
	"Kristen Wiig",
	"Jeff Daniels"
    ],
    "plot" : "During a manned mission to Mars, Astronaut Mark Watney is presumed dead after a fierce storm and left behind by his crew. But Watney has survived and finds himself stranded and alone on the hostile planet. With only meager supplies, he must draw upon his ingenuity, wit and spirit to subsist and find a way to signal to Earth that he is alive.",
    "poster" : "http://ia.media-imdb.com/images/M/MV5BMTc2MTQ3MDA1Nl5BMl5BanBnXkFtZTgwODA3OTI4NjE@._V1_SX300.jpg",
    "imdb" : {
	"id" : "tt3659388",
	"rating" : 8.2,
	"votes" : 187881
    },
    "tomato" : {
	"meter" : 93,
	"image" : "certified",
	"rating" : 7.9,
	"reviews" : 280,
	"fresh" : 261,
	"consensus" : "Smart, thrilling, and surprisingly funny, The Martian offers a faithful adaptation of the bestselling book that brings out the best in leading man Matt Damon and director Ridley Scott.",
	"userMeter" : 92,
	"userRating" : 4.3,
	"userReviews" : 104999
    },
    "metacritic" : 80,
    "awards" : {
	"wins" : 8,
	"nominations" : 14,
	"text" : "Nominated for 3 Golden Globes. Another 8 wins & 14 nominations."
    },
    "type" : "movie"
};

//Now, I try to update a movie that matches my imdb.id with the my above document imdb.id.
//If a document that matches this sentence is not found, then, with my $upsert true will insert the document that I've tried to update with.
db.movieDetails.updateOne(
    {"imdb.id": detail.imdb.id},
    {$set: detail},
    {upsert: true});


//Inserting a document to test the replaceOne method
db.movies.insertOne({ title: "The Martian", imdb: "tt3659388", year: "2015", type: "movie"});

//Replaces my existing document with the imdb: detail.imdb.id by my entire var detail
db.movies.replaceOne({ "imdb": detail.imdb.id}, detail);

// ----- Updating Documents ----- //



// ----- Homework 2.2 ----- //
mongoimport --drop -d students -c grades grades.json

db.grades.find({ "score" : { $gte : 65 } }).sort({"score": 1});
// ----- Homework 2.2 ----- //